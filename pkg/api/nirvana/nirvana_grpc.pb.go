// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: nirvana.proto

package nirvana

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nirvana_CreateException_FullMethodName = "/control.Nirvana/CreateException"
	Nirvana_CheckException_FullMethodName  = "/control.Nirvana/CheckException"
)

// NirvanaClient is the client API for Nirvana service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NirvanaClient interface {
	CreateException(ctx context.Context, in *CreateExceptionRequest, opts ...grpc.CallOption) (*CreateExceptionResponse, error)
	CheckException(ctx context.Context, in *CheckExceptionRequest, opts ...grpc.CallOption) (*CheckExceptionResponse, error)
}

type nirvanaClient struct {
	cc grpc.ClientConnInterface
}

func NewNirvanaClient(cc grpc.ClientConnInterface) NirvanaClient {
	return &nirvanaClient{cc}
}

func (c *nirvanaClient) CreateException(ctx context.Context, in *CreateExceptionRequest, opts ...grpc.CallOption) (*CreateExceptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExceptionResponse)
	err := c.cc.Invoke(ctx, Nirvana_CreateException_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nirvanaClient) CheckException(ctx context.Context, in *CheckExceptionRequest, opts ...grpc.CallOption) (*CheckExceptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckExceptionResponse)
	err := c.cc.Invoke(ctx, Nirvana_CheckException_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NirvanaServer is the server API for Nirvana service.
// All implementations must embed UnimplementedNirvanaServer
// for forward compatibility.
type NirvanaServer interface {
	CreateException(context.Context, *CreateExceptionRequest) (*CreateExceptionResponse, error)
	CheckException(context.Context, *CheckExceptionRequest) (*CheckExceptionResponse, error)
	mustEmbedUnimplementedNirvanaServer()
}

// UnimplementedNirvanaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNirvanaServer struct{}

func (UnimplementedNirvanaServer) CreateException(context.Context, *CreateExceptionRequest) (*CreateExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateException not implemented")
}
func (UnimplementedNirvanaServer) CheckException(context.Context, *CheckExceptionRequest) (*CheckExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckException not implemented")
}
func (UnimplementedNirvanaServer) mustEmbedUnimplementedNirvanaServer() {}
func (UnimplementedNirvanaServer) testEmbeddedByValue()                 {}

// UnsafeNirvanaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NirvanaServer will
// result in compilation errors.
type UnsafeNirvanaServer interface {
	mustEmbedUnimplementedNirvanaServer()
}

func RegisterNirvanaServer(s grpc.ServiceRegistrar, srv NirvanaServer) {
	// If the following call pancis, it indicates UnimplementedNirvanaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nirvana_ServiceDesc, srv)
}

func _Nirvana_CreateException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NirvanaServer).CreateException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nirvana_CreateException_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NirvanaServer).CreateException(ctx, req.(*CreateExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nirvana_CheckException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NirvanaServer).CheckException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nirvana_CheckException_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NirvanaServer).CheckException(ctx, req.(*CheckExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nirvana_ServiceDesc is the grpc.ServiceDesc for Nirvana service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nirvana_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.Nirvana",
	HandlerType: (*NirvanaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateException",
			Handler:    _Nirvana_CreateException_Handler,
		},
		{
			MethodName: "CheckException",
			Handler:    _Nirvana_CheckException_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nirvana.proto",
}
